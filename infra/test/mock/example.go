// Code generated by MockGen. DO NOT EDIT.
// Source: entites/example/contract.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	example "github.com/piovani/go_skeleton/entites/example"
)

// MockExampleRepository is a mock of ExampleRepository interface.
type MockExampleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExampleRepositoryMockRecorder
}

// MockExampleRepositoryMockRecorder is the mock recorder for MockExampleRepository.
type MockExampleRepositoryMockRecorder struct {
	mock *MockExampleRepository
}

// NewMockExampleRepository creates a new mock instance.
func NewMockExampleRepository(ctrl *gomock.Controller) *MockExampleRepository {
	mock := &MockExampleRepository{ctrl: ctrl}
	mock.recorder = &MockExampleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExampleRepository) EXPECT() *MockExampleRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockExampleRepository) Find(ID int) (*example.Example, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ID)
	ret0, _ := ret[0].(*example.Example)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockExampleRepositoryMockRecorder) Find(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockExampleRepository)(nil).Find), ID)
}
